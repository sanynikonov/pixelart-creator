// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PixelartCreator.Infrastructure;

namespace PixelartCreator.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210411195928_SeedColors")]
    partial class SeedColors
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PixelartCreator.Domain.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("A")
                        .HasColumnType("tinyint");

                    b.Property<byte>("B")
                        .HasColumnType("tinyint");

                    b.Property<byte>("G")
                        .HasColumnType("tinyint");

                    b.Property<byte>("R")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            A = (byte)255,
                            B = (byte)56,
                            G = (byte)178,
                            R = (byte)127
                        },
                        new
                        {
                            Id = 2,
                            A = (byte)255,
                            B = (byte)163,
                            G = (byte)233,
                            R = (byte)247
                        },
                        new
                        {
                            Id = 3,
                            A = (byte)255,
                            B = (byte)199,
                            G = (byte)199,
                            R = (byte)199
                        },
                        new
                        {
                            Id = 4,
                            A = (byte)255,
                            B = (byte)0,
                            G = (byte)0,
                            R = (byte)255
                        },
                        new
                        {
                            Id = 5,
                            A = (byte)255,
                            B = (byte)255,
                            G = (byte)160,
                            R = (byte)160
                        },
                        new
                        {
                            Id = 6,
                            A = (byte)255,
                            B = (byte)167,
                            G = (byte)167,
                            R = (byte)167
                        },
                        new
                        {
                            Id = 7,
                            A = (byte)255,
                            B = (byte)0,
                            G = (byte)124,
                            R = (byte)0
                        },
                        new
                        {
                            Id = 8,
                            A = (byte)255,
                            B = (byte)255,
                            G = (byte)255,
                            R = (byte)255
                        },
                        new
                        {
                            Id = 9,
                            A = (byte)255,
                            B = (byte)184,
                            G = (byte)168,
                            R = (byte)164
                        },
                        new
                        {
                            Id = 10,
                            A = (byte)255,
                            B = (byte)77,
                            G = (byte)109,
                            R = (byte)151
                        },
                        new
                        {
                            Id = 11,
                            A = (byte)255,
                            B = (byte)112,
                            G = (byte)112,
                            R = (byte)112
                        },
                        new
                        {
                            Id = 12,
                            A = (byte)255,
                            B = (byte)255,
                            G = (byte)64,
                            R = (byte)64
                        },
                        new
                        {
                            Id = 13,
                            A = (byte)255,
                            B = (byte)72,
                            G = (byte)119,
                            R = (byte)143
                        },
                        new
                        {
                            Id = 14,
                            A = (byte)255,
                            B = (byte)245,
                            G = (byte)252,
                            R = (byte)255
                        },
                        new
                        {
                            Id = 15,
                            A = (byte)255,
                            B = (byte)51,
                            G = (byte)127,
                            R = (byte)216
                        },
                        new
                        {
                            Id = 16,
                            A = (byte)255,
                            B = (byte)216,
                            G = (byte)76,
                            R = (byte)178
                        },
                        new
                        {
                            Id = 17,
                            A = (byte)255,
                            B = (byte)216,
                            G = (byte)153,
                            R = (byte)102
                        },
                        new
                        {
                            Id = 18,
                            A = (byte)255,
                            B = (byte)51,
                            G = (byte)229,
                            R = (byte)229
                        },
                        new
                        {
                            Id = 19,
                            A = (byte)255,
                            B = (byte)25,
                            G = (byte)204,
                            R = (byte)127
                        },
                        new
                        {
                            Id = 20,
                            A = (byte)255,
                            B = (byte)165,
                            G = (byte)127,
                            R = (byte)242
                        },
                        new
                        {
                            Id = 21,
                            A = (byte)255,
                            B = (byte)76,
                            G = (byte)76,
                            R = (byte)76
                        },
                        new
                        {
                            Id = 22,
                            A = (byte)255,
                            B = (byte)153,
                            G = (byte)153,
                            R = (byte)153
                        },
                        new
                        {
                            Id = 23,
                            A = (byte)255,
                            B = (byte)153,
                            G = (byte)127,
                            R = (byte)76
                        },
                        new
                        {
                            Id = 24,
                            A = (byte)255,
                            B = (byte)178,
                            G = (byte)63,
                            R = (byte)127
                        },
                        new
                        {
                            Id = 25,
                            A = (byte)255,
                            B = (byte)178,
                            G = (byte)76,
                            R = (byte)51
                        },
                        new
                        {
                            Id = 26,
                            A = (byte)255,
                            B = (byte)51,
                            G = (byte)76,
                            R = (byte)102
                        },
                        new
                        {
                            Id = 27,
                            A = (byte)255,
                            B = (byte)51,
                            G = (byte)127,
                            R = (byte)102
                        },
                        new
                        {
                            Id = 28,
                            A = (byte)255,
                            B = (byte)51,
                            G = (byte)51,
                            R = (byte)153
                        },
                        new
                        {
                            Id = 29,
                            A = (byte)255,
                            B = (byte)25,
                            G = (byte)25,
                            R = (byte)25
                        },
                        new
                        {
                            Id = 30,
                            A = (byte)255,
                            B = (byte)77,
                            G = (byte)238,
                            R = (byte)250
                        },
                        new
                        {
                            Id = 31,
                            A = (byte)255,
                            B = (byte)213,
                            G = (byte)219,
                            R = (byte)92
                        },
                        new
                        {
                            Id = 32,
                            A = (byte)255,
                            B = (byte)255,
                            G = (byte)128,
                            R = (byte)74
                        },
                        new
                        {
                            Id = 33,
                            A = (byte)255,
                            B = (byte)58,
                            G = (byte)217,
                            R = (byte)0
                        },
                        new
                        {
                            Id = 34,
                            A = (byte)255,
                            B = (byte)49,
                            G = (byte)86,
                            R = (byte)129
                        },
                        new
                        {
                            Id = 35,
                            A = (byte)255,
                            B = (byte)0,
                            G = (byte)2,
                            R = (byte)112
                        },
                        new
                        {
                            Id = 36,
                            A = (byte)255,
                            B = (byte)161,
                            G = (byte)177,
                            R = (byte)209
                        },
                        new
                        {
                            Id = 37,
                            A = (byte)255,
                            B = (byte)36,
                            G = (byte)82,
                            R = (byte)159
                        },
                        new
                        {
                            Id = 38,
                            A = (byte)255,
                            B = (byte)108,
                            G = (byte)87,
                            R = (byte)149
                        },
                        new
                        {
                            Id = 39,
                            A = (byte)255,
                            B = (byte)138,
                            G = (byte)108,
                            R = (byte)112
                        },
                        new
                        {
                            Id = 40,
                            A = (byte)255,
                            B = (byte)36,
                            G = (byte)133,
                            R = (byte)186
                        },
                        new
                        {
                            Id = 41,
                            A = (byte)255,
                            B = (byte)53,
                            G = (byte)117,
                            R = (byte)103
                        },
                        new
                        {
                            Id = 42,
                            A = (byte)255,
                            B = (byte)78,
                            G = (byte)77,
                            R = (byte)160
                        },
                        new
                        {
                            Id = 43,
                            A = (byte)255,
                            B = (byte)35,
                            G = (byte)41,
                            R = (byte)57
                        },
                        new
                        {
                            Id = 44,
                            A = (byte)255,
                            B = (byte)98,
                            G = (byte)107,
                            R = (byte)135
                        },
                        new
                        {
                            Id = 45,
                            A = (byte)255,
                            B = (byte)92,
                            G = (byte)92,
                            R = (byte)87
                        },
                        new
                        {
                            Id = 46,
                            A = (byte)255,
                            B = (byte)88,
                            G = (byte)73,
                            R = (byte)122
                        },
                        new
                        {
                            Id = 47,
                            A = (byte)255,
                            B = (byte)92,
                            G = (byte)62,
                            R = (byte)76
                        },
                        new
                        {
                            Id = 48,
                            A = (byte)255,
                            B = (byte)35,
                            G = (byte)50,
                            R = (byte)76
                        },
                        new
                        {
                            Id = 49,
                            A = (byte)255,
                            B = (byte)42,
                            G = (byte)82,
                            R = (byte)76
                        },
                        new
                        {
                            Id = 50,
                            A = (byte)255,
                            B = (byte)46,
                            G = (byte)60,
                            R = (byte)142
                        },
                        new
                        {
                            Id = 51,
                            A = (byte)255,
                            B = (byte)16,
                            G = (byte)22,
                            R = (byte)37
                        },
                        new
                        {
                            Id = 52,
                            A = (byte)255,
                            B = (byte)49,
                            G = (byte)48,
                            R = (byte)189
                        },
                        new
                        {
                            Id = 53,
                            A = (byte)255,
                            B = (byte)97,
                            G = (byte)63,
                            R = (byte)148
                        },
                        new
                        {
                            Id = 54,
                            A = (byte)255,
                            B = (byte)29,
                            G = (byte)25,
                            R = (byte)92
                        },
                        new
                        {
                            Id = 55,
                            A = (byte)255,
                            B = (byte)134,
                            G = (byte)126,
                            R = (byte)22
                        },
                        new
                        {
                            Id = 56,
                            A = (byte)255,
                            B = (byte)140,
                            G = (byte)142,
                            R = (byte)58
                        },
                        new
                        {
                            Id = 57,
                            A = (byte)255,
                            B = (byte)62,
                            G = (byte)44,
                            R = (byte)86
                        },
                        new
                        {
                            Id = 58,
                            A = (byte)255,
                            B = (byte)133,
                            G = (byte)180,
                            R = (byte)20
                        });
                });

            modelBuilder.Entity("PixelartCreator.Domain.MinecraftBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TexturePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("MinecraftBlocks");
                });

            modelBuilder.Entity("PixelartCreator.Domain.Pixelart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourcePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pixelarts");
                });

            modelBuilder.Entity("PixelartCreator.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PixelartCreator.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PixelartCreator.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PixelartCreator.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PixelartCreator.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PixelartCreator.Domain.MinecraftBlock", b =>
                {
                    b.HasOne("PixelartCreator.Domain.Color", "MapColor")
                        .WithMany("Blocks")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapColor");
                });

            modelBuilder.Entity("PixelartCreator.Domain.Pixelart", b =>
                {
                    b.HasOne("PixelartCreator.Domain.User", "User")
                        .WithMany("Pixelarts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PixelartCreator.Domain.Color", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("PixelartCreator.Domain.User", b =>
                {
                    b.Navigation("Pixelarts");
                });
#pragma warning restore 612, 618
        }
    }
}
