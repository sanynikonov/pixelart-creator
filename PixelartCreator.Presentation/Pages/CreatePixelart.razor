@page "/pixelarts/create"
@inject IFileService _fileService
@inject IPixelartUseCaseService _pixelartService
@inject IColorService _colorService

<h3>Create Pixelart</h3>

<InputFile accept=".jpg,.png" OnChange="UploadFile" />

<div class="container mt-5">
    <div class="row">
        <div class="col-sm-4 border p-3">
            <h4 class="text-center">Options</h4>
            <hr />
            <EditForm Model="@_options">
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="width">Width</label>
                        <InputNumber id="width" class="form-control" @bind-Value="_options.Width" />
                    </div>
                    <div class="form-group col-md-6">
                        <label for="height">Height</label>
                        <InputNumber id="height" class="form-control" @bind-Value="_options.Height" />
                    </div>
                </div>
                <div class="form-group">
                    <label for="unit">Unit</label>
                    <InputSelect id="unit" class="form-control align-content-center" @bind-Value="_options.Unit">
                        <option selected value="@SizeUnit.Pixel">@SizeUnit.Pixel</option>
                        <option value="@SizeUnit.Map">@SizeUnit.Map</option>
                    </InputSelect>
                </div>
                <div class="container">
                    <div class="col-md-12 text-center">
                        <button type="button" class="btn btn-primary w-50" @onclick="SubmitForm" disabled="@_submitDisabled">Submit</button>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-sm-8">
            <div class="btn-group d-flex">
                <button class="flex-fill btn @TabColour(Source)"
                        @onclick="@(() => ChangeActiveTab(Source))">
                    Photo
                </button>
                <button class="flex-fill btn @TabColour(Result)"
                        @onclick="@(() => ChangeActiveTab(Result))">
                    Pixelart
                </button>
            </div>

            <div class="rounded text-center m-3">
                @if (_activeTab == Source)
                {
                    @if (_uploadedFileName != null)
                    {
                        <img style="max-width: 100%" src="Images/@_uploadedFileName" />
                    }
                    else
                    {
                        <p>Upload a photo</p>
                    }
                }
                else if (_activeTab == Result)
                {
                    @if (_pixelartFileName != null)
                    {
                        <img style="max-width: 100%" src="Images/@_pixelartFileName" />
                    }
                    else
                    {
                        <p>Click submit button to create a pixelart</p>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string _activeTab = Source;
    private const string Source = "Source";
    private const string Result = "Result";

    private string TabColour(string tabName) => _activeTab == tabName ? "btn-primary" : "btn-secondary";

    private void ChangeActiveTab(string tabName) => _activeTab = tabName;

    private PixelartOptions _options = new PixelartOptions { Unit = SizeUnit.Pixel };

    private string _uploadedFileName;
    private string _pixelartFileName;

    private bool _submitDisabled;

    private async Task UploadFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file != null)
        {
            var model = new FileUploadModel
            {
                OldName = file.Name,
                Stream = file.Data
            };

            var name = await _fileService.UploadImageAsync(model);

            _uploadedFileName = name;
        }

        UpdateOptionsFromUploadedFile();

        _activeTab = Source;
    }

    private void UpdateOptionsFromUploadedFile()
    {
        var image = _fileService.GetImageInfo(_uploadedFileName);
        _options.Width = image.Width;
        _options.Height = image.Height;
        _options.Unit = SizeUnit.Pixel;
    }

    private async Task SubmitForm()
    {
        _submitDisabled = true;

        try
        {
            await BuildPixelart();
        }
        finally
        {
            _submitDisabled = false;
        }
    }

    private async Task BuildPixelart()
    {
        var colorsIds = (await _colorService.GetAsync()).Select(x => x.Id);

        var model = new PixelartCreateModel
        {
            Size = new System.Drawing.Size(_options.Width, _options.Height),
            SourcePath = _uploadedFileName,
            Unit = _options.Unit,
            AvailibleColorsIds = colorsIds
        };

        var response = await _pixelartService.CreateAsync(model);

        _pixelartFileName = System.IO.Path.GetFileName(response.ResultPath);

        _activeTab = Result;
    }
}
