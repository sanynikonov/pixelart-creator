@page "/colors"
@inject IColorService ColorService
@inject NavigationManager NavManager

<h3>Colors Library</h3>

<div class="accordion" id="accordionExample">
    @foreach (var item in _colors)
    {
        <div class="card">
            <div class="card-header d-flex flex-row" id="heading@(item.Id)">
                <a name="@item.Id"><div class="m-1" style="height: 30px; width: 30px; background-color: rgb(@item.R, @item.G, @item.B)"></div></a>
                <h5 class="m-1 mb-0">
                    <button class="btn btn-link collapsed" type="button" data-toggle="collapse"
                            data-target="#collapse@(item.Id)" aria-expanded="false" aria-controls="collapse@(item.Id)">
                        @item.Name
                    </button>
                </h5>
            </div>

            <div id="collapse@(item.Id)" class="collapse @(_selectedColorId == item.Id ? "show" : string.Empty)"
                 aria-labelledby="headingOne" data-parent="#accordionExample">
                <div class="card-body">
                    <ul class="list-group">
                        @foreach (var block in item.BlocksNames)
                        {
                            <li class="list-group-item">@block</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private IEnumerable<ColorLibraryItemModel> _colors = new List<ColorLibraryItemModel>();
    private int _selectedColorId;
    private const string SelectedColorParameter = "selected";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _colors = await ColorService.GetColorsLibraryAsync();

        NavManager.TryGetQueryString<int>(SelectedColorParameter, out _selectedColorId);
    }
}
