@page "/pixelarts"
@inject IPixelartService PixelartService
@inject IAuthService AuthService
@inject NavigationManager NavManager

<h3>People Works</h3>

<div class="d-flex flex-wrap">
    @foreach (var item in _pixelarts)
    {
        <div class="card" style="width: 18rem;">
            <a href="pixelarts/@item.Id">
                <img class="card-img-top" src="Images/@item.ResultPath" alt="Card image cap">
            </a>
            <div class="card-body">
                <h5 class="card-title">@item.Name by @@@item.UserName</h5>
                <p class="card-text text-truncate">@item.Description</p>
                <p class="card-text">@item.CreatedAt.ToLongDateString()</p>
            </div>
        </div>
    }
</div>

@if (_filter.PageNumber > 1)
{
<button @onclick="async () => await DownloadPageAsync(_filter.PageSize, _filter.PageNumber - 1)"
        class="btn btn-primary">
    Previous
</button>
}
@if (_pixelarts.Count() == _filter.PageSize)
{
    <button @onclick="async () => await DownloadPageAsync(_filter.PageSize, _filter.PageNumber + 1)"
            class="btn btn-primary">
        Next
    </button>
}

@code {
    private IEnumerable<PixelartListItemModel> _pixelarts = new List<PixelartListItemModel>();
    private PageFilter _filter = new PageFilter();

    protected override async Task OnInitializedAsync()
    {
        await DownloadPageAsync(_filter.PageSize, _filter.PageNumber);
    }

    private async Task DownloadPageAsync(int pageSize, int pageNumber)
    {
        _filter.PageNumber = pageNumber;
        _filter.PageSize = pageSize;
        _pixelarts = await PixelartService.GetAsync(_filter);
    }
}
