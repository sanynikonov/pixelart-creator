@page "/pixelarts/create"
@inject IFileService _fileService
@inject IPixelartService _pixelartService
@inject IColorService _colorService

<h3 class="align-content-center">Create Pixelart</h3>
<div class="container">
    <div class="row mt-3">
        <div class="custom-file">
            <InputFile accept=".jpg,.png" class="custom-file-input" id="file-input" OnChange="UploadFile" />
            <label class="custom-file-label" for="file-input">Choose file</label>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-sm-4 p-3 border rounded">
            <h4 class="text-center">Options</h4>
            <hr />
            <EditForm Model="@_options" OnValidSubmit="SubmitForm">
                <DataAnnotationsValidator />
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="width">Width</label>
                        <InputNumber id="width" class="form-control" @bind-Value="_options.Width" />
                        <ValidationMessage For="@(() => _options.Width)" />
                    </div>
                    <div class="form-group col-md-6">
                        <label for="height">Height</label>
                        <InputNumber id="height" class="form-control" @bind-Value="_options.Height" />
                        <ValidationMessage For="@(() => _options.Height)" />
                    </div>
                </div>
                <div class="form-group">
                    <label for="unit">Unit</label>
                    <InputSelect id="unit" class="form-control align-content-center" @bind-Value="_options.Unit">
                        <option selected value="@SizeUnit.Pixel">@SizeUnit.Pixel</option>
                        <option value="@SizeUnit.Map">@SizeUnit.Map</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => _options.Unit)" />
                </div>
                <hr />
                <div>
                    <div class="d-flex justify-content-between mb-2">
                        <h5>Palette</h5>
                        <div>
                            <button type="button" class="btn btn-success btn-sm" @onclick="SelectAllColors">Reset</button>
                        </div>
                    </div>
                    <div class="d-flex align-content-start flex-wrap">
                        @for (int i = 0; i < colors.Count; i++)
                        {
                            var tempint = i;
                            if (colors[i].Selected)
                            {
                                <div style="background-color: rgb(@colors[i].Color.R, @colors[i].Color.G, @colors[i].Color.B);
                                    width: 30px; height: 30px" @onclick="() => ToggleColor(tempint)"></div>
                            }
                            else
                            {
                                <div style="background-color: #eee; width: 30px; height: 30px"
                                     @onclick="() => ToggleColor(tempint)"></div>
                            }
                        }
                    </div>
                </div>
                <hr />
                <div class="container">
                    <div class="col-md-12 text-center">
                        <button type="submit" class="btn btn-primary w-50" disabled="@_submitDisabled">Submit</button>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-sm-8 border rounded p-0">
            <div class="btn-group d-flex">
                <button class="flex-fill btn @TabColour(Source)" @onclick="@(() => ChangeActiveTab(Source))">
                    Photo
                </button>
                <button class="flex-fill btn @TabColour(Result)" @onclick="@(() => ChangeActiveTab(Result))">
                    Pixelart
                </button>
            </div>

            <div class="rounded text-center m-3">
                @if (_activeTab == Source)
                {
                    @if (_uploadedFileName != null)
                    {
                        <img style="width: 100%; image-rendering: pixelated;" src="Images/@_uploadedFileName" />
                    }
                    else
                    {
                        <p>Upload a photo</p>
                    }
                }
                else if (_activeTab == Result)
                {
                    @if (_pixelartFileName != null)
                    {
                        <img style="width: 100%; image-rendering: pixelated;" src="Images/@_pixelartFileName" />
                    }
                    else
                    {
                        <p>Click submit button to create a pixelart</p>
                    }
                }
                @if (PixelartCreated)
                {
                    <a class="form-control btn btn-primary w-25 mt-3"
                       href="/download?fileName=@_pixelartFileName">Download</a>
                    <AuthorizeView>
                        <Authorized>
                            <a href="/pixelarts/save?source=@(_uploadedFileName)&result=@(_pixelartFileName)"
                               class="form-control btn btn-primary w-25 mt-3">Save to Gallery</a>
                        </Authorized>
                    </AuthorizeView>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string _activeTab = Source;
    private const string Source = "Source";
    private const string Result = "Result";

    private string TabColour(string tabName) => _activeTab == tabName ? "btn-primary" : "btn-secondary";
    private bool PixelartCreated => _pixelartFileName != null;

    private List<(ColorModel Color, bool Selected)> colors = new List<(ColorModel, bool)>();

    private void ChangeActiveTab(string tabName) => _activeTab = tabName;

    private PixelartOptions _options = new PixelartOptions { Unit = SizeUnit.Pixel };

    private string _uploadedFileName;
    private string _pixelartFileName;

    private bool _submitDisabled;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        colors = (await _colorService.GetAsync()).Select(x => (x, true)).ToList();
    }

    private void ToggleColor(int index)
    {
        colors[index] = (colors[index].Color, !colors[index].Selected);
    }

    private void SelectAllColors()
    {
        for (int i = 0; i < colors.Count; i++)
        {
            colors[i] = (colors[i].Color, true);
        }
    }

    private async Task UploadFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file != null)
        {
            var model = new FileUploadModel
            {
                OldName = file.Name,
                Stream = file.Data
            };

            var name = await _fileService.UploadImageAsync(model);

            _uploadedFileName = name;
        }

        UpdateOptionsFromUploadedFile();

        _activeTab = Source;
    }

    private void UpdateOptionsFromUploadedFile()
    {
        var image = _fileService.GetImageInfo(_uploadedFileName);
        _options.Width = image.Width;
        _options.Height = image.Height;
        _options.Unit = SizeUnit.Pixel;
    }

    private async Task SubmitForm()
    {
        _submitDisabled = true;

        try
        {
            await BuildPixelart();
        }
        finally
        {
            _submitDisabled = false;
        }
    }

    private async Task BuildPixelart()
    {
        var colorsIds = colors.Where(x => x.Selected).Select(x => x.Color.Id).ToList();

        var model = new PixelartCreateModel
        {
            Size = new System.Drawing.Size(_options.Width, _options.Height),
            SourcePath = _uploadedFileName,
            Unit = _options.Unit,
            AvailibleColorsIds = colorsIds
        };

        var response = await _pixelartService.CreateAsync(model);

        _pixelartFileName = System.IO.Path.GetFileName(response.ResultPath);

        _activeTab = Result;
    }
}
