@page "/my-library"
@inject IPixelartService PixelartService
@inject IAuthService AuthService

<h3>My Pixelarts Collection</h3>

<div class="d-flex flex-wrap">
    @foreach (var item in _pixelarts)
    {
        <div class="card" style="width: 18rem;">
            <a href="pixelarts/@item.Id">
                <img class="card-img-top" src="Images/@item.ResultPath" alt="Card image cap">
            </a>
            <div class="card-body">
                <h5 class="card-title">"@item.Name"</h5>
                <p class="card-text text-truncate">@item.Description</p>
                <p class="card-text">@item.CreatedAt.ToLongDateString()</p>
            </div>
        </div>
    }
</div>

@if (_filter.PageNumber > 1)
{
    <button @onclick="async () => await DownloadPageAsync(_filter.PageSize, _filter.PageNumber - 1)"
            class="btn btn-primary">
        Previous
    </button>
}
@if (_pixelarts.Count() == _filter.PageSize)
{
    <button @onclick="async () => await DownloadPageAsync(_filter.PageSize, _filter.PageNumber + 1)"
            class="btn btn-primary">
        Next
    </button>
}

@code {
    private PageFilter _filter = new PageFilter();
    private int _userId;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private IEnumerable<PixelartInfoModel> _pixelarts = new List<PixelartInfoModel>();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateTask;
        var id = AuthService.GetUserId(state.User);
        _userId = int.Parse(id);

        await DownloadPageAsync(_filter.PageSize, _filter.PageNumber);
    }

    private async Task DownloadPageAsync(int pageSize, int pageNumber)
    {
        _filter.PageNumber = pageNumber;
        _filter.PageSize = pageSize;
        _pixelarts = await PixelartService.GetByUserAsync(_userId, _filter);
    }
}
